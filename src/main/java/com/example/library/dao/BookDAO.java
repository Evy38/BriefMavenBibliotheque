package com.example.library.dao; // üß≠ Declare que cette classe est dans le package "dao"

import java.sql.Connection; // üì¶ Importe tout ce qu‚Äôil faut pour se connecter √† une base SQL (JDBC)
import java.sql.DriverManager; // Pour stocker la liste des livres
import java.sql.PreparedStatement;
import java.sql.ResultSet; // üëà On importe notre mod√®le Book pour pouvoir l‚Äôutiliser
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.library.model.Book;

public class BookDAO {

    // üß™ M√©thode priv√©e pour obtenir une connexion √† la base SQLite
    private Connection getConnection() throws SQLException {
        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException e) {
            throw new SQLException("SQLite JDBC driver not found.", e);
        }

        // Connexion √† la base de donn√©es
        String url = "jdbc:sqlite:library.db";
        Connection conn = DriverManager.getConnection(url);

        return conn;
    }

    // üìö M√©thode pour lister tous les livres dans la base de donn√©es
    public List<Book> listAllBooks() {
        List<Book> books = new ArrayList<>();

        String sql = "SELECT * FROM books"; // üîç Requ√™te SQL pour r√©cup√©rer tous les livres

        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            // üîÅ Parcourt les r√©sultats et cr√©e des objets Book
            while (rs.next()) {
                int id = rs.getInt("id");
                String title = rs.getString("title");
                String author = rs.getString("author");
                int year = rs.getInt("year");

                Book book = new Book(id, title, author, year);
                books.add(book); // Ajoute le livre √† la liste
            }

        } catch (SQLException e) {
            System.err.println("Erreur SQL : " + e.getMessage());
        }

        return books; // üì§ Retourne la liste compl√®te des livres
    }

    // ‚ûï M√©thode pour ajouter un livre dans la base
    public void addBook(Book book) {
        String sql = "INSERT INTO books(title, author, year) VALUES(?, ?, ?)";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, book.getBookTitle());
            pstmt.setString(2, book.getBookAuthor());
            pstmt.setInt(3, book.getBookYear());

            pstmt.executeUpdate(); // ‚úÖ Ex√©cute l‚Äôinsertion

        } catch (SQLException e) {
           System.err.println("Erreur SQL : " + e.getMessage());

        }
    }

    public BookDAO() {
    try (Connection conn = getConnection(); Statement stmt = conn.createStatement()) {
        String sql = "CREATE TABLE IF NOT EXISTS books (" +
                     "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                     "title TEXT NOT NULL," +
                     "author TEXT NOT NULL," +
                     "year INTEGER)";
        stmt.execute(sql);
    } catch (SQLException e) {
        System.err.println("Erreur SQL lors de la cr√©ation de la table : " + e.getMessage());
    }
}
}
